import os
import re

# configfile: 'config.yaml'

LOG_DIR = config['LOG_DIR']
NPM_DIRECTORY = config['OUTPUT_DIRS']['NPM_DIRECTORY']
EPI_BASIC_DIR = config['OUTPUT_DIRS']['EPI_BASIC_DIR']
EPI_REGION_DIR = config['OUTPUT_DIRS']['EPI_REGION_DIR']
EVAL_BASIC_DIR = config['OUTPUT_DIRS']['EVAL_BASIC_DIR']
EVAL_REGION_DIR = config['OUTPUT_DIRS']['EVAL_REGION_DIR']

run=list(range(0,config["NUM_EPI_ITERS"]))

rule all:
    input:
        EVAL_BASIC_DIR,
        EVAL_REGION_DIR,
        '.euclidean_eval',
        '.hamming_eval',
        '.pearson_eval',
        '.densitycut_eval'

rule run_preprocess:
    input:
        meth_file=config['METH_FILE'],
        regions_file=config['REGION_FILE']
    output:
        os.path.join(NPM_DIRECTORY, re.sub('.tsv.gz', '.RDa.gz', os.path.basename(config['METH_FILE'])))
    shell:
        'Rscript {config[SOFTWARE][hclust_software]} '
        '--method None '
        '--output_directory {NPM_DIRECTORY} '
        '--methylation_file {input.meth_file} '
        '--regions_file {input.regions_file} '
        '--use_cache {config[PARAMS][NPM][use_cache]} '

rule run_euclidean_clust:
    input:
        meth_file=config['METH_FILE'],
        regions_file=config['REGION_FILE'],
        cache_data=os.path.join(NPM_DIRECTORY, re.sub('.tsv.gz', '.RDa.gz', os.path.basename(config['METH_FILE'])))
    output:
        os.path.join(NPM_DIRECTORY, 'EuclideanClust_clusters_region_based_maxk_{}.tsv.gz'.format(config['PARAMS']['NPM']['max_k'])),
    log:
        os.path.join(LOG_DIR, 'run_euclidean_clust.log')
    shell:
        'Rscript {config[SOFTWARE][hclust_software]} '
        '--method euclidean '
        '--index {config[PARAMS][NPM][index]} '
        '--max_k {config[PARAMS][NPM][max_k]} '
        '--output_directory {NPM_DIRECTORY} '
        '--methylation_file {input.meth_file} '
        '--regions_file {input.regions_file} '
        '--impute {config[PARAMS][NPM][impute]} '
        '--use_cache {config[PARAMS][NPM][use_cache]} '
        '> {log}'

rule run_hamming_clust:
    input:
        meth_file=config['METH_FILE'],
        regions_file=config['REGION_FILE'],
        cache_data=os.path.join(NPM_DIRECTORY, re.sub('.tsv.gz', '.RDa.gz', os.path.basename(config['METH_FILE'])))
    output:
        os.path.join(NPM_DIRECTORY, 'HammingClust_clusters_CpG_based_maxk_{}.tsv.gz'.format(config['PARAMS']['NPM']['max_k'])),
    log:
        os.path.join(LOG_DIR, 'run_hamming_clust.log')
    shell:
        'Rscript {config[SOFTWARE][hclust_software]} '
        '--method hamming '
        '--index {config[PARAMS][NPM][index]} '
        '--max_k {config[PARAMS][NPM][max_k]} '
        '--output_directory {NPM_DIRECTORY} '
        '--methylation_file {input.meth_file} '
        '--regions_file {input.regions_file} '
        '--impute {config[PARAMS][NPM][impute]} '
        '--use_cache {config[PARAMS][NPM][use_cache]} '
        '> {log}'

rule run_pearson_clust:
    input:
        meth_file=config['METH_FILE'],
        regions_file=config['REGION_FILE'],
        cache_data=os.path.join(NPM_DIRECTORY, re.sub('.tsv.gz', '.RDa.gz', os.path.basename(config['METH_FILE'])))
    output:
        os.path.join(NPM_DIRECTORY, 'PearsonClust_clusters_CpG_based_maxk_{}.tsv.gz'.format(config['PARAMS']['NPM']['max_k'])),
    log:
        os.path.join(LOG_DIR, 'run_pearson_clust.log')
    shell:
        'Rscript {config[SOFTWARE][hclust_software]} '
        '--method pearson '
        '--index {config[PARAMS][NPM][index]} '
        '--max_k {config[PARAMS][NPM][max_k]} '
        '--output_directory {NPM_DIRECTORY} '
        '--methylation_file {input.meth_file} '
        '--regions_file {input.regions_file} '
        '--impute {config[PARAMS][NPM][impute]} '
        '--use_cache {config[PARAMS][NPM][use_cache]} '
        '> {log}'

rule run_density_cut:
    input:
        meth_file=config['METH_FILE'],
        regions_file=config['REGION_FILE'],
        cache_data=os.path.join(NPM_DIRECTORY, re.sub('.tsv.gz', '.RDa.gz', os.path.basename(config['METH_FILE'])))
    output:
        os.path.join(NPM_DIRECTORY, 'DensityCut_clusters_Region_based_maxPC_{}.tsv.gz'.format(config['PARAMS']['NPM']['max_k']))
    log:
        os.path.join(LOG_DIR, 'run_density_cut.log')
    shell:
        'Rscript {config[SOFTWARE][hclust_software]} '
        '--method densitycut '
        '--max_k {config[PARAMS][NPM][max_k]} '
        '--output_directory {NPM_DIRECTORY} '
        '--methylation_file {input.meth_file} '
        '--regions_file {input.regions_file} '
        '--impute {config[PARAMS][NPM][impute]} '
        '--use_cache {config[PARAMS][NPM][use_cache]} '
        '> {log}'

rule process_npm_methods:
    input:
        hfile=os.path.join(NPM_DIRECTORY, 'EuclideanClust_clusters_region_based_maxk_{}.tsv.gz'.format(config['PARAMS']['NPM']['max_k'])),
        pfile=os.path.join(NPM_DIRECTORY, 'HammingClust_clusters_CpG_based_maxk_{}.tsv.gz'.format(config['PARAMS']['NPM']['max_k'])),
        peafile=os.path.join(NPM_DIRECTORY, 'PearsonClust_clusters_CpG_based_maxk_{}.tsv.gz'.format(config['PARAMS']['NPM']['max_k'])),
        dfile=os.path.join(NPM_DIRECTORY, 'DensityCut_clusters_Region_based_maxPC_{}.tsv.gz'.format(config['PARAMS']['NPM']['max_k']))
    output:
        htempfile=temp('htempfile'),
        ptempfile=temp('ptempfile'),
        peatempfile=temp('peatempfile'),
        dtempfile=temp('dtempfile'),
        idtempfile=temp('idtempfile'),
    params:
        k_1=config['PARAMS']['NPM']['max_k']+1
    shell:
        'gunzip -c {input.hfile} | cut -f1 > {output.idtempfile}; '
        'gunzip -c {input.hfile} | cut -f2-{params.k_1} > {output.htempfile}; '
        'gunzip -c {input.pfile} | cut -f2-{params.k_1} > {output.ptempfile}; '
        'gunzip -c {input.peafile} | cut -f2-{params.k_1} > {output.peatempfile}; '
        'gunzip -c {input.dfile} | cut -f2 > {output.dtempfile}; '

rule join_npm_methods:
    input:
        htempfile='htempfile',
        ptempfile='ptempfile',
        peatempfile='peatempfile',
        dtempfile='dtempfile',
        idtempfile='idtempfile'
    output:
        os.path.join(NPM_DIRECTORY, 'initial_inputs.tsv.gz')
    shell:
        'paste {input.idtempfile} {input.htempfile} {input.ptempfile} {input.peatempfile} {input.dtempfile} | gzip -c - > {output}'

if (config['TRUE_FILE']):
    rule run_euclidean_eval:
        input:
            hfile=os.path.join(NPM_DIRECTORY, 'EuclideanClust_clusters_region_based_maxk_{}.tsv.gz'.format(config['PARAMS']['NPM']['max_k']))
        output:
            os.path.join(NPM_DIRECTORY, "results_EuclideanClust.txt"),
            touch(temp('.euclidean_eval'))
        shell:
            'evaluate_clustering '
            '--true_clusters_file {config[TRUE_FILE]} '
            '--true_prevalences {config[TRUE_PREVALENCES]} '
            '--predicted_clusters_file {input.hfile} '
            '--clusters_are_probabilities False '
            '--results_file {output}'

    rule run_hamming_eval:
        input:
            pfile=os.path.join(NPM_DIRECTORY, 'HammingClust_clusters_CpG_based_maxk_{}.tsv.gz'.format(config['PARAMS']['NPM']['max_k']))
        output:
            os.path.join(NPM_DIRECTORY, "results_HammingClust.txt"),
            touch(temp('.hamming_eval'))
        shell:
            'evaluate_clustering '
            '--true_clusters_file {config[TRUE_FILE]} '
            '--true_prevalences {config[TRUE_PREVALENCES]} '
            '--predicted_clusters_file {input.pfile} '
            '--clusters_are_probabilities False '
            '--results_file {output}'

    rule run_pearson_eval:
        input:
            peafile=os.path.join(NPM_DIRECTORY, 'PearsonClust_clusters_CpG_based_maxk_{}.tsv.gz'.format(config['PARAMS']['NPM']['max_k']))
        output:
            os.path.join(NPM_DIRECTORY, "results_PearsonClust.txt"),
            touch(temp('.pearson_eval'))
        shell:
            'evaluate_clustering '
            '--true_clusters_file {config[TRUE_FILE]} '
            '--true_prevalences {config[TRUE_PREVALENCES]} '
            '--predicted_clusters_file {input.peafile} '
            '--clusters_are_probabilities False '
            '--results_file {output}'

    rule run_densitycut_eval:
        input:
            dfile=os.path.join(NPM_DIRECTORY, 'DensityCut_clusters_Region_based_maxPC_{}.tsv.gz'.format(config['PARAMS']['NPM']['max_k']))
        output:
            os.path.join(NPM_DIRECTORY, "results_DensityCut.txt"),
            touch(temp('.densitycut_eval'))
        shell:
            'evaluate_clustering '
            '--true_clusters_file {config[TRUE_FILE]} '
            '--true_prevalences {config[TRUE_PREVALENCES]} '
            '--predicted_clusters_file {input.dfile} '
            '--clusters_are_probabilities False '
            '--results_file {output}'
else:
    rule eval_no_true_clusters:
        input:
            hfile=os.path.join(NPM_DIRECTORY, 'EuclideanClust_clusters_region_based_maxk_{}.tsv.gz'.format(config['PARAMS']['NPM']['max_k'])),
            pfile=os.path.join(NPM_DIRECTORY, 'HammingClust_clusters_CpG_based_maxk_{}.tsv.gz'.format(config['PARAMS']['NPM']['max_k'])),
            peafile=os.path.join(NPM_DIRECTORY, 'PearsonClust_clusters_CpG_based_maxk_{}.tsv.gz'.format(config['PARAMS']['NPM']['max_k'])),
            dfile=os.path.join(NPM_DIRECTORY, 'DensityCut_clusters_Region_based_maxPC_{}.tsv.gz'.format(config['PARAMS']['NPM']['max_k']))
        output:
            touch(temp('.euclidean_eval')),
            touch(temp('.hamming_eval')),
            touch(temp('.pearson_eval')),
            touch(temp('.densitycut_eval'))

rule run_epiclomal_basic:
    input:
        meth_file=config['METH_FILE'],
        initial_clusters_file=os.path.join(NPM_DIRECTORY, 'initial_inputs.tsv.gz')
    output:
        directory(os.path.join(EPI_BASIC_DIR, '{run}'))
    log:
        os.path.join(config['LOG_DIR'], 'run_epiclomal_basic_{run}.log')
    run:
        if (config['TRUE_FILE']):
            shell( '(echo "==================================="; '
                'echo "Running EpiclomalBasic RUN {wildcards.run}"; '
                'echo "==================================="; '
                'epiclomal Basic-GeMM '
                '--out_dir {output} '
                '--repeat_id {wildcards.run} '
                '--K {config[PARAMS][EPICLOMAL][K]} '
                '--mu_has_k {config[PARAMS][EPICLOMAL][mu_has_k]} '
                '--config_file {config[PARAMS][EPICLOMAL][config_file]} '
                '--methylation_file {input.meth_file} '
                '--initial_clusters_file {input.initial_clusters_file} '
                '--true_clusters_file {config[TRUE_FILE]}) '
                '> {log}')
        else:
            shell('(echo "==================================="; '
                'echo "Running EpiclomalBasic RUN {wildcards.run}"; '
                'echo "==================================="; '
                'epiclomal Basic-GeMM '
                '--out_dir {output} '
                '--repeat_id {wildcards.run} '
                '--K {config[PARAMS][EPICLOMAL][K]} '
                '--mu_has_k {config[PARAMS][EPICLOMAL][mu_has_k]} '
                '--config_file {config[PARAMS][EPICLOMAL][config_file]} '
                '--methylation_file {input.meth_file} '
                '--initial_clusters_file {input.initial_clusters_file}) '
                '> {log}')

rule run_epiclomal_region:
    input:
        meth_file=config['METH_FILE'],
        initial_clusters_file=os.path.join(NPM_DIRECTORY, 'initial_inputs.tsv.gz'),
        regions_file=config['REGION_FILE'],
    output:
        directory(os.path.join(EPI_REGION_DIR, '{run}'))
    log:
        os.path.join(config['LOG_DIR'], 'run_epiclomal_region_{run}.log')
    run:
        if (config['TRUE_FILE']):
            shell('(echo "==================================="; '
                'echo "Running EpiclomalRegion RUN {wildcards.run}"; '
                'echo "==================================="; '
                'epiclomal Region-GeMM '
                '--out_dir {output} '
                '--repeat_id {wildcards.run} '
                '--K {config[PARAMS][EPICLOMAL][K]} '
                '--mu_has_k {config[PARAMS][EPICLOMAL][mu_has_k]} '
                '--config_file {config[PARAMS][EPICLOMAL][config_file]} '
                '--methylation_file {input.meth_file} '
                '--initial_clusters_file {input.initial_clusters_file} '
                '--regions_file {input.regions_file} '
                '--slsbulk_iterations {config[PARAMS][EPICLOMAL][slsbulk_iterations]} '
                '--check_uncertainty {config[PARAMS][EPICLOMAL][check_uncertainty]} '
                '--true_clusters_file {config[TRUE_FILE]}) '
                '> {log}')
        else:
            shell('(echo "==================================="; '
                'echo "Running EpiclomalRegion RUN {wildcards.run}"; '
                'echo "==================================="; '
                'epiclomal Region-GeMM '
                '--out_dir {output} '
                '--repeat_id {wildcards.run} '
                '--K {config[PARAMS][EPICLOMAL][K]} '
                '--mu_has_k {config[PARAMS][EPICLOMAL][mu_has_k]} '
                '--config_file {config[PARAMS][EPICLOMAL][config_file]} '
                '--methylation_file {input.meth_file} '
                '--initial_clusters_file {input.initial_clusters_file} '
                '--regions_file {input.regions_file} '
                '--slsbulk_iterations {config[PARAMS][EPICLOMAL][slsbulk_iterations]} '
                '--check_uncertainty {config[PARAMS][EPICLOMAL][check_uncertainty]}) '
                '> {log}')

rule run_eval_basic:
    input:
        regions_file=config['REGION_FILE'],
        meth_file=config['METH_FILE'],
        dependency=expand(os.path.join(EPI_BASIC_DIR, '{run}'), run=run)
    output:
        directory(EVAL_BASIC_DIR)
    log:
        os.path.join(config['LOG_DIR'], 'run_eval_basic.log')
    run:
        if (config['TRUE_FILE']):
            shell('Rscript {config[SOFTWARE][eval_software]} '
                '--output_dir {output} '
                '--input_dir {EPI_BASIC_DIR} '
                '--methylation_file {input.meth_file} '
                '--regions_file {input.regions_file} '
                '--model_name basic '
                '--true_clusters_file {config[TRUE_FILE]} '
                '> {log}')
        else:
            shell('Rscript {config[SOFTWARE][eval_software]} '
                '--output_dir {output} '
                '--input_dir {EPI_BASIC_DIR} '
                '--methylation_file {input.meth_file} '
                '--regions_file {input.regions_file} '
                '--model_name basic '
                '> {log}')

rule run_eval_region:
    input:
        regions_file=config['REGION_FILE'],
        meth_file=config['METH_FILE'],
        dependency=expand(os.path.join(EPI_REGION_DIR, '{run}'), run=run)
    output:
        directory(EVAL_REGION_DIR)
    log:
        os.path.join(config['LOG_DIR'], 'run_eval_region.log')
    run:
        if (config['TRUE_FILE']):
            shell('Rscript {config[SOFTWARE][eval_software]} '
                '--output_dir {output} '
                '--input_dir {EPI_REGION_DIR} '
                '--methylation_file {input.meth_file} '
                '--regions_file {input.regions_file} '
                '--model_name region '
                '--true_clusters_file {config[TRUE_FILE]} '
                '> {log}')
        else:
            shell('Rscript {config[SOFTWARE][eval_software]} '
                '--output_dir {output} '
                '--input_dir {EPI_REGION_DIR} '
                '--methylation_file {input.meth_file} '
                '--regions_file {input.regions_file} '
                '--model_name region '
                '> {log}')
