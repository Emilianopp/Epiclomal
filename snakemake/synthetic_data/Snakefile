import os

LOG_DIR = config['LOG_DIR']
DATA_DIRECTORY = config['DATA_DIRECTORY']
OUTDIR = config['OUTPUT_DIR']
NPM_DIRECTORY = os.path.join(OUTDIR, 'simple_hclust')
EPI_BASIC_DIR = os.path.join(OUTDIR, 'epi_basic')
EPI_REGION_DIR = os.path.join(OUTDIR, 'epi_region')
EVAL_BASIC_DIR = os.path.join(OUTDIR, 'result_basic')
EVAL_REGION_DIR = os.path.join(OUTDIR, 'result_region')

run=list(range(0,config["NUM_EPI_ITERS"]))

default_mem = 12

rule all:
    input:
        EVAL_BASIC_DIR,
        EVAL_REGION_DIR,
        os.path.join(NPM_DIRECTORY, "results_EuclideanClust.txt"),
        os.path.join(NPM_DIRECTORY, "results_HammingClust.txt"),
        os.path.join(NPM_DIRECTORY, "results_PearsonClust.txt"),
        os.path.join(NPM_DIRECTORY, "results_DensityCut.txt")

rule generate_synthetic_data:
    output:
        os.path.join(DATA_DIRECTORY, 'data/data_incomplete.tsv.gz'),
        os.path.join(DATA_DIRECTORY, 'data/regions_file.tsv.gz'),
        os.path.join(DATA_DIRECTORY, 'data/true_clone_membership.tsv.gz'),
        os.path.join(DATA_DIRECTORY, 'data/bulk_data_sample_1.tsv.gz'),
        os.path.join(DATA_DIRECTORY, 'data/true_clone_epigenotypes.tsv.gz')
    resources:
        h_vmem=default_mem
    log:
        os.path.join(LOG_DIR, 'generate_synthetic_data.log')
    shell:
        'Rscript {config[SOFTWARE][generate_synthetic_software]} '
        '--saveall {config[PARAMS][GENERATE_SYNTHETIC][saveall]} '
        '--verbose {config[PARAMS][GENERATE_SYNTHETIC][verbose]} '
        '--clone_prevalence {config[PARAMS][ALL][prevalences]} '
        '--read_size {config[PARAMS][GENERATE_SYNTHETIC][read_size]} '
        '--region_size_type {config[PARAMS][GENERATE_SYNTHETIC][region_size_type]} '
        '--genotype_prob {config[PARAMS][GENERATE_SYNTHETIC][genotype_prob]} '
        '--num_regions {config[PARAMS][GENERATE_SYNTHETIC][num_regions]} '
        '--num_clones {config[PARAMS][GENERATE_SYNTHETIC][num_clones]} '
        '--num_cells {config[PARAMS][GENERATE_SYNTHETIC][num_cells]} '
        '--plot_data {config[PARAMS][GENERATE_SYNTHETIC][plot_data]} '
        '--seed {config[PARAMS][GENERATE_SYNTHETIC][seed]} '
        '--prop_add_var {config[PARAMS][GENERATE_SYNTHETIC][prop_add_var]} '
        '--num_samples {config[PARAMS][GENERATE_SYNTHETIC][num_samples]} '
        '--missing_probability {config[PARAMS][GENERATE_SYNTHETIC][missing_probability]} '
        '--error_probability {config[PARAMS][GENERATE_SYNTHETIC][error_probability]} '
        '--num_loci {config[PARAMS][GENERATE_SYNTHETIC][num_loci]} '
        '--given_dir_complete {config[PARAMS][GENERATE_SYNTHETIC][given_dir_complete]} '
        '--phylogenetic_generation {config[PARAMS][GENERATE_SYNTHETIC][phylogenetic_generation]} '
        '--percent_regions_dirichlet_param {config[PARAMS][GENERATE_SYNTHETIC][percent_regions_dirichlet_param]} '
        '--dirichlet_param_genotype_prob {config[PARAMS][GENERATE_SYNTHETIC][dirichlet_param_genotype_prob]} '
        '--output_dir {DATA_DIRECTORY} '
        '> {log}'

rule run_euclidean_clust:
    input:
        meth_file=os.path.join(DATA_DIRECTORY, 'data/data_incomplete.tsv.gz'),
        regions_file=os.path.join(DATA_DIRECTORY, 'data/regions_file.tsv.gz')
    output:
        os.path.join(NPM_DIRECTORY, 'EuclideanClust_clusters_region_based_maxk_{}.tsv.gz'.format(config['PARAMS']['NPM']['max_k'])),
        os.path.join(NPM_DIRECTORY, 'EuclideanClust_cell_order_region_based_maxk_{}.tsv.gz'.format(config['PARAMS']['NPM']['max_k']))
    resources:
        h_vmem=default_mem
    log:
        os.path.join(LOG_DIR, 'run_euclidean_clust.log')
    shell:
        'Rscript {config[SOFTWARE][hclust_software]} '
        '--method euclidean '
        '--index {config[PARAMS][NPM][index]} '
        '--max_k {config[PARAMS][NPM][max_k]} '
        '--output_directory {NPM_DIRECTORY} '
        '--methylation_file {input.meth_file} '
        '--regions_file {input.regions_file} '
        '--impute {config[PARAMS][NPM][impute]} '
        '--use_cache {config[PARAMS][NPM][use_cache]} '
        '> {log}'

rule run_hamming_clust:
    input:
        meth_file=os.path.join(DATA_DIRECTORY, 'data/data_incomplete.tsv.gz'),
        regions_file=os.path.join(DATA_DIRECTORY, 'data/regions_file.tsv.gz')
    output:
        os.path.join(NPM_DIRECTORY, 'HammingClust_clusters_CpG_based_maxk_{}.tsv.gz'.format(config['PARAMS']['NPM']['max_k'])),
        os.path.join(NPM_DIRECTORY, 'HammingClust_cell_order_CpG_based_maxk_{}.tsv.gz'.format(config['PARAMS']['NPM']['max_k']))
    resources:
        h_vmem=default_mem
    log:
        os.path.join(LOG_DIR, 'run_hamming_clust.log')
    shell:
        'Rscript {config[SOFTWARE][hclust_software]} '
        '--method hamming '
        '--index {config[PARAMS][NPM][index]} '
        '--max_k {config[PARAMS][NPM][max_k]} '
        '--output_directory {NPM_DIRECTORY} '
        '--methylation_file {input.meth_file} '
        '--regions_file {input.regions_file} '
        '--impute {config[PARAMS][NPM][impute]} '
        '--use_cache {config[PARAMS][NPM][use_cache]} '
        '> {log}'

rule run_pearson_clust:
    input:
        meth_file=os.path.join(DATA_DIRECTORY, 'data/data_incomplete.tsv.gz'),
        regions_file=os.path.join(DATA_DIRECTORY, 'data/regions_file.tsv.gz')
    output:
        os.path.join(NPM_DIRECTORY, 'PearsonClust_clusters_CpG_based_maxk_{}.tsv.gz'.format(config['PARAMS']['NPM']['max_k'])),
        os.path.join(NPM_DIRECTORY, 'PearsonClust_cell_order_CpG_based_maxk_{}.tsv.gz'.format(config['PARAMS']['NPM']['max_k']))
    resources:
        h_vmem=default_mem
    log:
        os.path.join(LOG_DIR, 'run_pearson_clust.log')
    shell:
        'Rscript {config[SOFTWARE][hclust_software]} '
        '--method pearson '
        '--index {config[PARAMS][NPM][index]} '
        '--max_k {config[PARAMS][NPM][max_k]} '
        '--output_directory {NPM_DIRECTORY} '
        '--methylation_file {input.meth_file} '
        '--regions_file {input.regions_file} '
        '--impute {config[PARAMS][NPM][impute]} '
        '--use_cache {config[PARAMS][NPM][use_cache]} '
        '> {log}'

rule run_density_cut:
    input:
        meth_file=os.path.join(DATA_DIRECTORY, 'data/data_incomplete.tsv.gz'),
        regions_file=os.path.join(DATA_DIRECTORY, 'data/regions_file.tsv.gz')
    output:
        os.path.join(NPM_DIRECTORY, 'DensityCut_clusters_Region_based_maxPC_{}.tsv.gz'.format(config['PARAMS']['NPM']['max_k']))
    resources:
        h_vmem=default_mem
    log:
        os.path.join(LOG_DIR, 'run_density_cut.log')
    shell:
        'Rscript {config[SOFTWARE][hclust_software]} '
        '--method densitycut '
        '--max_k {config[PARAMS][NPM][max_k]} '
        '--output_directory {NPM_DIRECTORY} '
        '--methylation_file {input.meth_file} '
        '--regions_file {input.regions_file} '
        '--impute {config[PARAMS][NPM][impute]} '
        '--use_cache {config[PARAMS][NPM][use_cache]} '
        '> {log}'

rule process_npm_methods:
    input:
        hfile=os.path.join(NPM_DIRECTORY, 'EuclideanClust_clusters_region_based_maxk_{}.tsv.gz'.format(config['PARAMS']['NPM']['max_k'])),
        pfile=os.path.join(NPM_DIRECTORY, 'HammingClust_clusters_CpG_based_maxk_{}.tsv.gz'.format(config['PARAMS']['NPM']['max_k'])),
        peafile=os.path.join(NPM_DIRECTORY, 'PearsonClust_clusters_CpG_based_maxk_{}.tsv.gz'.format(config['PARAMS']['NPM']['max_k'])),
        dfile=os.path.join(NPM_DIRECTORY, 'DensityCut_clusters_Region_based_maxPC_{}.tsv.gz'.format(config['PARAMS']['NPM']['max_k']))
    output:
        htempfile=temp('htempfile'),
        ptempfile=temp('ptempfile'),
        peatempfile=temp('peatempfile'),
        dtempfile=temp('dtempfile'),
        idtempfile=temp('idtempfile')
    resources:
        h_vmem=default_mem
    params:
        k_1=config['PARAMS']['NPM']['max_k']+1
    shell:
        'gunzip -c {input.hfile} | cut -f1 > {output.idtempfile}; '
        'gunzip -c {input.hfile} | cut -f2-{params.k_1} > {output.htempfile}; '
        'gunzip -c {input.pfile} | cut -f2-{params.k_1} > {output.ptempfile}; '
        'gunzip -c {input.peafile} | cut -f2-{params.k_1} > {output.peatempfile}; '
        'gunzip -c {input.dfile} | cut -f2 > {output.dtempfile}; '

rule join_npm_methods:
    input:
        htempfile='htempfile',
        ptempfile='ptempfile',
        peatempfile='peatempfile',
        dtempfile='dtempfile',
        idtempfile='idtempfile'
    output:
        os.path.join(NPM_DIRECTORY, 'initial_inputs.tsv.gz')
    resources:
        h_vmem=default_mem
    shell:
        'paste {input.idtempfile} {input.htempfile} {input.ptempfile} {input.peatempfile} {input.dtempfile} | gzip -c - > {output}'

rule run_euclidean_eval:
    input:
        true_clusters_file=os.path.join(DATA_DIRECTORY, 'data/true_clone_membership.tsv.gz'),
        hfile=os.path.join(NPM_DIRECTORY, 'EuclideanClust_clusters_region_based_maxk_{}.tsv.gz'.format(config['PARAMS']['NPM']['max_k']))
    output:
        os.path.join(NPM_DIRECTORY, "results_EuclideanClust.txt")
    resources:
        h_vmem=default_mem
    shell:
        'evaluate_clustering '
        '--true_clusters_file {input.true_clusters_file} '
        '--true_prevalences {config[PARAMS][ALL][prevalences]} '
        '--predicted_clusters_file {input.hfile} '
        '--clusters_are_probabilities False '
        '--results_file {output}'

rule run_hamming_eval:
    input:
        true_clusters_file=os.path.join(DATA_DIRECTORY, 'data/true_clone_membership.tsv.gz'),
        pfile=os.path.join(NPM_DIRECTORY, 'HammingClust_clusters_CpG_based_maxk_{}.tsv.gz'.format(config['PARAMS']['NPM']['max_k']))
    output:
        os.path.join(NPM_DIRECTORY, "results_HammingClust.txt")
    resources:
        h_vmem=default_mem
    shell:
        'evaluate_clustering '
        '--true_clusters_file {input.true_clusters_file} '
        '--true_prevalences {config[PARAMS][ALL][prevalences]} '
        '--predicted_clusters_file {input.pfile} '
        '--clusters_are_probabilities False '
        '--results_file {output}'

rule run_pearson_eval:
    input:
        true_clusters_file=os.path.join(DATA_DIRECTORY, 'data/true_clone_membership.tsv.gz'),
        peafile=os.path.join(NPM_DIRECTORY, 'PearsonClust_clusters_CpG_based_maxk_{}.tsv.gz'.format(config['PARAMS']['NPM']['max_k']))
    output:
        os.path.join(NPM_DIRECTORY, "results_PearsonClust.txt")
    resources:
        h_vmem=default_mem
    shell:
        'evaluate_clustering '
        '--true_clusters_file {input.true_clusters_file} '
        '--true_prevalences {config[PARAMS][ALL][prevalences]} '
        '--predicted_clusters_file {input.peafile} '
        '--clusters_are_probabilities False '
        '--results_file {output}'

rule run_densitycut_eval:
    input:
        true_clusters_file=os.path.join(DATA_DIRECTORY, 'data/true_clone_membership.tsv.gz'),
        dfile=os.path.join(NPM_DIRECTORY, 'DensityCut_clusters_Region_based_maxPC_{}.tsv.gz'.format(config['PARAMS']['NPM']['max_k']))
    output:
        os.path.join(NPM_DIRECTORY, "results_DensityCut.txt")
    resources:
        h_vmem=default_mem
    shell:
        'evaluate_clustering '
        '--true_clusters_file {input.true_clusters_file} '
        '--true_prevalences {config[PARAMS][ALL][prevalences]} '
        '--predicted_clusters_file {input.dfile} '
        '--clusters_are_probabilities False '
        '--results_file {output}'

rule run_epiclomal_basic:
    input:
        true_clusters_file=os.path.join(DATA_DIRECTORY, 'data/true_clone_membership.tsv.gz'),
        meth_file=os.path.join(DATA_DIRECTORY, 'data/data_incomplete.tsv.gz'),
        initial_clusters_file=os.path.join(NPM_DIRECTORY, 'initial_inputs.tsv.gz')
    output:
        directory(os.path.join(EPI_BASIC_DIR, '{run}'))
    resources:
        h_vmem=512
    shell:
        '(echo "==================================="; '
        'echo "Running EpiclomalBasic RUN {wildcards.run}"; '
        'echo "==================================="; '
        'epiclomal Basic-GeMM '
        '--out_dir {output} '
        '--repeat_id {wildcards.run} '
        '--K {config[PARAMS][EPICLOMAL][K]} '
        '--mu_has_k {config[PARAMS][EPICLOMAL][mu_has_k]} '
        '--true_prevalences {config[PARAMS][ALL][prevalences]} '
        '--config_file {config[PARAMS][EPICLOMAL][config_file]} '
        '--true_clusters_file {input.true_clusters_file} '
        '--methylation_file {input.meth_file} '
        '--initial_clusters_file {input.initial_clusters_file})'

rule run_epiclomal_region:
    input:
        true_clusters_file=os.path.join(DATA_DIRECTORY, 'data/true_clone_membership.tsv.gz'),
        meth_file=os.path.join(DATA_DIRECTORY, 'data/data_incomplete.tsv.gz'),
        initial_clusters_file=os.path.join(NPM_DIRECTORY, 'initial_inputs.tsv.gz'),
        regions_file=os.path.join(DATA_DIRECTORY, 'data/regions_file.tsv.gz'),
        slsbulk_file=os.path.join(DATA_DIRECTORY, 'data/bulk_data_sample_1.tsv.gz')
    output:
        directory(os.path.join(EPI_REGION_DIR, '{run}'))
    resources:
        h_vmem=512
    shell:
        '(echo "==================================="; '
        'echo "Running EpiclomalRegion RUN {wildcards.run}"; '
        'echo "==================================="; '
        'epiclomal Region-GeMM '
        '--out_dir {output} '
        '--repeat_id {wildcards.run} '
        '--K {config[PARAMS][EPICLOMAL][K]} '
        '--mu_has_k {config[PARAMS][EPICLOMAL][mu_has_k]} '
        '--true_prevalences {config[PARAMS][ALL][prevalences]} '
        '--config_file {config[PARAMS][EPICLOMAL][config_file]} '
        '--true_clusters_file {input.true_clusters_file} '
        '--methylation_file {input.meth_file} '
        '--initial_clusters_file {input.initial_clusters_file} '
        '--regions_file {input.regions_file} '
        '--slsbulk_iterations {config[PARAMS][EPICLOMAL][slsbulk_iterations]} '
        '--slsbulk_file {input.slsbulk_file} '
        '--check_uncertainty {config[PARAMS][EPICLOMAL][check_uncertainty]})'

rule run_eval_basic:
    input:
        regions_file=os.path.join(DATA_DIRECTORY, 'data/regions_file.tsv.gz'),
        true_clusters_file=os.path.join(DATA_DIRECTORY, 'data/true_clone_membership.tsv.gz'),
        true_epigenotypes_file=os.path.join(DATA_DIRECTORY, 'data/true_clone_epigenotypes.tsv.gz'),
        meth_file=os.path.join(DATA_DIRECTORY, 'data/data_incomplete.tsv.gz'),
        dependency=expand(os.path.join(EPI_BASIC_DIR, '{run}'), run=run)
    output:
        directory(EVAL_BASIC_DIR)
    resources:
        h_vmem=default_mem
    log:
        os.path.join(config['LOG_DIR'], 'run_eval_basic.log')
    shell:
        'Rscript {config[SOFTWARE][eval_software]} '
        '--output_dir {output} '
        '--input_dir {EPI_BASIC_DIR} '
        '--true_clusters_file {input.true_clusters_file} '
        '--true_epigenotypes_file {input.true_epigenotypes_file} '
        '--methylation_file {input.meth_file} '
        '--regions_file {input.regions_file} '
        '--model_name basic '
        '> {log}'

rule run_eval_region:
    input:
        regions_file=os.path.join(DATA_DIRECTORY, 'data/regions_file.tsv.gz'),
        true_clusters_file=os.path.join(DATA_DIRECTORY, 'data/true_clone_membership.tsv.gz'),
        true_epigenotypes_file=os.path.join(DATA_DIRECTORY, 'data/true_clone_epigenotypes.tsv.gz'),
        meth_file=os.path.join(DATA_DIRECTORY, 'data/data_incomplete.tsv.gz'),
        dependency=expand(os.path.join(EPI_REGION_DIR, '{run}'), run=run)
    output:
        directory(EVAL_REGION_DIR)
    resources:
        h_vmem=default_mem
    log:
        os.path.join(config['LOG_DIR'], 'run_eval_region.log')
    shell:
        'Rscript {config[SOFTWARE][eval_software]} '
        '--output_dir {output} '
        '--input_dir {EPI_REGION_DIR} '
        '--true_clusters_file {input.true_clusters_file} '
        '--true_epigenotypes_file {input.true_epigenotypes_file} '
        '--methylation_file {input.meth_file} '
        '--regions_file {input.regions_file} '
        '--model_name region '
        '> {log}'
